---

name: Build and Deploy Image

on:
  push:
    tags: ["v[0-9].[0-9]+.[0-9]+"]
    branches:
      - "development"
      - "staging"
      - "main"

env:
  HCP_BUCKET_NAME: "ubuntu-image"

jobs:
  build-image:
    name: Build Packer Image
    runs-on: ubuntu-latest
    outputs:
      iteration_id: ${{ steps.hcp.outputs.iteration_id }}
      
    steps:
      - name: Import Secrets
        uses: hashicorp/vault-action@v2.4.0
        with:
          url: https://vault-public-vault-08c44092.b76a1ca6.z1.hashicorp.cloud:8200
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          namespace: admin
          secrets: |
            azure/creds/github-app client_id | CLIENT_ID ;
            azure/creds/github-app client_secret | CLIENT_SECRET ;
            hcp/data/packer/github-sp AZURE_SUBSCRIPTION_ID | SUBSCRIPTION_ID ;
            hcp/data/packer/github-sp AZURE_TENANT_ID | TENANT_ID ;
            hcp/data/packer/github-sp HCP_PROJECT_ID | HCP_PROJECT_ID ;            
            hcp/data/packer/github-sp HCP_ORGANIZATION_ID | HCP_ORGANIZATION_ID ;            
            hcp/data/packer/github-sp HCP_CLIENT_ID | HCP_CLIENT_ID ;
            hcp/data/packer/github-sp HCP_CLIENT_SECRET | HCP_CLIENT_SECRET
                        
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Validate Packer Syntax
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          arguments: -syntax-only
          target: ubuntu.pkr.hcl

      - name: Packer Init
        run: packer init .
        
      - name: Packer Build - Branches
        if: "startsWith(github.ref, 'refs/heads/')"
        run: packer build .
        
      - name: Packer Build - Tags
        if: startsWith(github.ref, 'refs/tags/v')
        run: HCP_PACKER_BUILD_FINGERPRINT=$(date +'%m%d%YT%H%M%S') packer build .
        
      - name: Get HCP Packer Iteration ID from Packer Manifest
        id: hcp
        run: |
          last_run_uuid=$(jq -r '.last_run_uuid' "./packer_manifest.json")
          build=$(jq -r '.builds[] | select(.packer_run_uuid == "'"$last_run_uuid"'")' "./packer_manifest.json")
          iteration_id=$(echo "$build" | jq -r '.custom_data.iteration_id')
          echo "::set-output name=iteration_id::$iteration_id"
          
  update-hcp-packer-channel:
    name: Update HCP Packer channel
    needs: ["build-image"]
    runs-on: ubuntu-latest
    steps:
      - name: Import Secrets
        uses: hashicorp/vault-action@v2.4.0
        with:
          url: https://vault-public-vault-08c44092.b76a1ca6.z1.hashicorp.cloud:8200
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          namespace: admin
          secrets: |
            hcp/data/packer/github-sp HCP_PROJECT_ID | HCP_PROJECT_ID ;            
            hcp/data/packer/github-sp HCP_ORGANIZATION_ID | HCP_ORGANIZATION_ID ;            
            hcp/data/packer/github-sp HCP_CLIENT_ID | HCP_CLIENT_ID ;
            hcp/data/packer/github-sp HCP_CLIENT_SECRET | HCP_CLIENT_SECRET
    
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create Channel Variable
        working-directory: .github/scripts
        run: echo "channel_name=$( echo ${{ github.ref_name }} | sed 's/\./-/g')" >> $GITHUB_ENV
        
      - name: Test Channel Variable
        run: echo $channel_name
 
      - name: Set Channel
        run: |
        
# Entry point
test "$#" -eq 3 || usage

bucket_slug="$1"
channel_name="$2"
iteration_id="$3"
base_url="https://api.cloud.hashicorp.com/packer/2021-04-30/organizations/$HCP_ORGANIZATION_ID/projects/$HCP_PROJECT_ID"

# If on main branch, set channel to release
if [ "$channel_name" == "main" ]; then
  channel_name="release"
fi


# Authenticate
response=$(curl --request POST --silent \
  --url 'https://auth.hashicorp.com/oauth/token' \
  --data grant_type=client_credentials \
  --data client_id="$HCP_CLIENT_ID" \
  --data client_secret="$HCP_CLIENT_SECRET" \
  --data audience="https://api.hashicorp.cloud")
api_error=$(echo "$response" | jq -r '.error')
if [ "$api_error" != null ]; then
  echo "Failed to get access token: $api_error"
  exit 1
fi
bearer=$(echo "$response" | jq -r '.access_token')

# Get channel info, create if doesn't exist
api_error=$(curl --request GET --silent \
  --url "$base_url/images/$bucket_slug/channels/$channel_name" \
  --header  "authorization: Bearer $bearer" | jq -r '.error')
if [ "$api_error" != null ]; then
  # Channel likely doesn't exist, create it
  api_error=$(curl --request POST --silent \
    --url "$base_url/images/$bucket_slug/channels" \
    --data-raw '{"slug":"'"$channel_name"'"}' \
    --header "authorization: Bearer $bearer" | jq -r '.error')
  if [ "$api_error" != null ]; then
    echo "Error creating channel: $api_error"
    exit 1
  fi
fi

# Update channel to point to iteration
api_error=$(curl --request PATCH --silent \
  --url "$base_url/images/$bucket_slug/channels/$channel_name" \
  --data-raw '{"iteration_id":"'"$iteration_id"'"}' \
  --header "authorization: Bearer $bearer" | jq -r '.error')
if [ "$api_error" != null ]; then
    echo "Error updating channel: $api_error"
    exit 1
fi
 
#      - name: Set Channel
#        working-directory: .github/scripts
#        run: ./create_channel_iteration.sh $HCP_BUCKET_NAME $channel_name "${{ needs.build-image.outputs.iteration_id }}"
